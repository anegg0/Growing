@page "/addtray"
@using Growing.Shared.Models
@using System
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@inject HttpClient HttpClient
@inject NavigationManager urlNavigationManager

<h1>Create Tray</h1>
<hr />

<EditForm Model="@tray" OnValidSubmit="CreateTray">
    <DataAnnotationsValidator />
    <div class="form-group row">
        <label class="control-label col-md-12">Name</label>
        <div class="col-md-4">
            <input class="form-control" @bind="tray.Name" />
        </div>
        <ValidationMessage For="@(() => tray.Name)" />
    </div>

    <label class="control-label col-md-12">Tray type</label>
    <div class="col-md-4">
        @if (trayType == null)
        {
        <select class="custom-select" disabled>
            <option>(loading...)</option>
        </select>
        }
        else
        {
        <select class="custom-select" @onchange="TrayTypeSelected">
            <option value="-1" disabled selected>(select)</option>
            @for (var i = 0; i < trayType.Count; i++)
            {
            <option value="@i">@trayType[i].Name - (£@(trayType[i].Name))</option>
            }
        </select>
        }
        <ValidationMessage For="@(() => TrayType.Name)" />
    </div>

    <div class="form-group row">
        <label class="control-label col-md-12">Sowing Date</label>
        <div class="col-md-4">
            <input class="form-control" @bind="tray.SowingDate" />
        </div>
        <ValidationMessage For="@(() => tray.SowingDate)" />
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Save</button>
        <button class="btn btn-light" @onclick="Cancel">Cancel</button>
    </div>
</EditForm>

@code {
    Tray tray = new Tray();

    protected async Task CreateTray()
    {
        await HttpClient.PostAsJsonAsync("/api/Tray/Create", tray);
        urlNavigationManager.NavigateTo("/fetchtray");
    }

    // void TrayTypeSelected(ChangeEventArgs e)
    // {
    // if (int.TryParse((string)e.Value, out var index) && index >= 0)
    // {
    //   AddTrayType(trayType[index]);
    // }
    // }

    void Cancel()
    {
    urlNavigationManager.NavigateTo("/fetchtray");
    }

    List<TrayType> trayType;

    protected async override Task OnInitializedAsync()
    {
    
        trayType = await HttpClient.GetFromJsonAsync<List<TrayType>>("trayType");
        Console.WriteLine(trayType);
    }

}
