@page "/addtray"
@using Growing.Shared.Models
@using System
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Forms
@inject HttpClient HttpClient
@inject NavigationManager urlNavigationManager

<h1>Create Tray</h1>
<hr />

<EditForm Model="@tray" OnValidSubmit="CreateTray">
    <DataAnnotationsValidator />
    <div class="form-group row">
        <label class="control-label col-md-12">Name</label>
        <div class="col-md-4">
            <input class="form-control" @bind="tray.Name" />
        </div>
        <ValidationMessage For="@(() => tray.Name)" />
    </div>
                            <tr>
                                <td>"id=1"</td>
                                <td>@trayTypes[0].Name</td>
                            </tr>
    <div class="form-group row">
            <label class="control-label col-md-12">Tray Type</label>
            <div class="col-md-4">
                @*<select class="form-control" @onchange="@TrayTypeClicked">
                    <option>Select TrayType</option>
                    @for (int i = 0; i < trayTypes.Length; i++)
                    {
                        if (i == @trayTypeId)
                        {
                    <td>"@i"</td>
                    <td>@trayTypes[i].Name</td>
                        }
                        else
                        {
                            <tr>
                                <td>Jill</td>
                                <td>Smith</td>
                                <td>50</td>
                            </tr>
                        }
                    }
                </select>*@
            </div>
    </div>

    <div class="form-group row">
        <label class="control-label col-md-12">Department</label>
        <div class="col-md-4">
            <input class="form-control" @bind="tray.Department" />
        </div>
        <span><ValidationMessage For="@(() => tray.Department)" /></span>
    </div>
    <div class="form-group row">
        <label class="control-label col-md-12">City</label>
        <div class="col-md-4">
            <input class="form-control" @bind="tray.City" />
        </div>
        <span><ValidationMessage For="@(() => tray.City)" /></span>
    </div>
    <div class="form-group row">
        <label class="control-label col-md-12">Sowing Date</label>
        <div class="col-md-4">
            <input class="form-control" @bind="tray.SowingDate" />
        </div>
        <ValidationMessage For="@(() => tray.SowingDate)" />
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Save</button>
        <button class="btn btn-light" @onclick="Cancel">Cancel</button>
    </div>
</EditForm>

@code {
    [Parameter] public string InitialText { get; set; } = "Select Type";
    Tray tray = new Tray();
    TrayType[] trayTypes;
    int trayTypeId { get; set; }
    string trayTypeName { get; set; }
    protected override async Task OnInitializedAsync()
    {
        trayTypeId = 0;
        trayTypes = await HttpClient.GetFromJsonAsync<TrayType[]>("/api/TrayType/Index");
        Console.WriteLine(trayTypes[0].Name);
        Console.WriteLine(trayTypes[1].Name);
        Console.WriteLine(trayTypes[2].Name);
    }

    void TrayTypeClicked(ChangeEventArgs trayTypeEvent)
    {
        //trayTypeId = trayTypeEvent.Value.ToString();
        //trayTypeId = int.Parse(trayTypeId);
        trayTypeId = int.Parse(trayTypeEvent.Value.ToString());
        //trayTypeName = trayTypes.FirstOrDefault(s => s.TrayTypeId == trayTypeId).Name;
        //trayTypeName = trayTypes.FirstOrDefault(s => s.TrayTypeId == trayTypeId).Name;
        Console.WriteLine("trayTypeId: " + trayTypeId);
        //Console.WriteLine("trayTypeName: " + trayTypeName);
        //Console.WriteLine("trayTypeLength: " + trayTypes.Length);
        //Console.WriteLine("trayTypeLength: " + @trayTypes[0].Name);
        var selected = trayTypes[trayTypeId];
    }

    protected async Task CreateTray()
    {
        await HttpClient.PostAsJsonAsync("/api/Tray/Create", tray);
        urlNavigationManager.NavigateTo("/fetchtray");
    }

    void Cancel()
    {
        urlNavigationManager.NavigateTo("/fetchtray");
    }
    }
